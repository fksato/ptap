{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"overflow",
				"overflow-y\tproperty"
			],
			[
				"tStati",
				"tStatistic_criticalUb"
			],
			[
				"tS",
				"tStatistic_criticalLb"
			],
			[
				"performance",
				"performancePerBag"
			],
			[
				"empirical",
				"empiricalEffectSize"
			],
			[
				"sumPer",
				"sumPerformanceRest"
			],
			[
				"perform",
				"performancePerBag"
			],
			[
				"perof",
				"performancePerBag"
			],
			[
				"infer",
				"infer_load_method"
			],
			[
				"is_",
				"is_buffered"
			],
			[
				"create",
				"createBufferSource"
			],
			[
				"punish",
				"punish_sound"
			],
			[
				"necess",
				"necessaryKeyList"
			],
			[
				"nec",
				"necessaryKeyList"
			],
			[
				"__",
				"__TASK_SEQUENCE_GOES_HERE__"
			],
			[
				"game",
				"GAME"
			],
			[
				"CheckPointer",
				"CheckPointerClass"
			],
			[
				"num",
				"num_elements_in_cache"
			],
			[
				"start",
				"startsWith"
			],
			[
				"Te",
				"TERMINAL_STATE"
			],
			[
				"debugCheck",
				"debugCheckpointSavePath"
			],
			[
				"generate",
				"generate_default_checkpoint"
			],
			[
				"term",
				"TERMINAL_STATE"
			],
			[
				"current",
				"current_stage"
			],
			[
				"distractorBag",
				"distractorBagIdxPool"
			],
			[
				"actionC",
				"actionXCentroids"
			],
			[
				"virtual",
				"virtualPixelsPerInch"
			],
			[
				"scren",
				"screen_virtualPixelsPerInch"
			],
			[
				"stimulus_objectome",
				"stimulus_objectome_flute"
			],
			[
				"stimulus",
				"stimulus_objectome_pineapple"
			],
			[
				"imageBags",
				"check_imageBags"
			],
			[
				"ycent",
				"ycentroid_pixel"
			],
			[
				"fixation",
				"fixationRadius_pixel"
			],
			[
				"last_fi",
				"last_fixation_radius"
			],
			[
				"last_",
				"last_fixation_ycentroid"
			],
			[
				"last_fix",
				"last_fixation_xcentroid"
			],
			[
				"last",
				"last_fixation_radius"
			],
			[
				"periodic_rewa",
				"periodic_reward_interval"
			],
			[
				"transition",
				"transitionCriterionMet"
			],
			[
				"_image",
				"_image_cache"
			],
			[
				"_b",
				"_build_StateBags"
			],
			[
				"worker_id",
				"worker_id_encrypted"
			],
			[
				"bonus_paid_",
				"bonus_paid_unix_timestamp"
			],
			[
				"bonus_amo",
				"bonus_paid_amount_USD"
			],
			[
				"Worker",
				"WorkerID_encrypted"
			],
			[
				"Assignment",
				"AssignmentId"
			],
			[
				"NUM_",
				"TRIAL_NUMBER_FROM_SESSION_START"
			],
			[
				"read",
				"readAsArrayBuffer"
			],
			[
				"current_trial",
				"current_stage_trial_number"
			],
			[
				"test_image",
				"test_images_q"
			],
			[
				"DBX",
				"DBX_REDIRECT_URI_ROOT"
			],
			[
				"Experim",
				"ExperimentFilePath"
			],
			[
				"curre",
				"current_trial_outcome"
			],
			[
				"get",
				"get_juiceRequest_filepath"
			],
			[
				"jucie",
				"juiceChangeRequest"
			],
			[
				"task",
				"TASK_idx"
			],
			[
				"TRIAL",
				"TRIALDATA_SAVE_TIMEOUT_PERIOD_IN_SECONDS"
			],
			[
				"need2",
				"need2loadParameters"
			],
			[
				"Current",
				"CurrentAutomatorStage"
			],
			[
				"Curre",
				"CurrentAutomatorStage"
			],
			[
				"num_train",
				"num_train_per_obj"
			],
			[
				"objA",
				"objAobjB_2_negative_tasks_idx"
			],
			[
				"im1obj",
				"im1objB_2_negative_tasks_idx"
			],
			[
				"objAobjB_2",
				"objAobjB_2_positive_tasks_idx"
			],
			[
				"obj0",
				"obj0_is_correct_and_obj1_is_distractor_trial_idx"
			],
			[
				"obj_2_is",
				"obj_2_is_distractor_idx"
			],
			[
				"tk_2_",
				"tk_2_permuted_idx"
			],
			[
				"random",
				"random_state"
			],
			[
				"c",
				"c"
			],
			[
				"x_novel",
				"x_novel_embedded"
			],
			[
				"x_support",
				"x_support_embedded"
			],
			[
				"drop",
				"dropout_keep_prob"
			],
			[
				"inverse",
				"inverse_mapping"
			],
			[
				"y_novel",
				"y_novel_vectorized"
			],
			[
				"int_label",
				"int_label_space"
			],
			[
				"y_support",
				"y_support_vectorized"
			],
			[
				"exemplars",
				"exemplars_per_class_in_batch"
			],
			[
				"exemplar",
				"exemplars_per_class_in_batch"
			],
			[
				"reuse",
				"reuse_variables"
			],
			[
				"embedde",
				"embedded_x_support"
			],
			[
				"embe",
				"embedded_x_novel"
			],
			[
				"image_resize",
				"image_resize_dims"
			],
			[
				"emb",
				"embedded_support_set"
			],
			[
				"checkpoin",
				"checkpoint_path"
			],
			[
				"check",
				"checkpoint_path"
			],
			[
				"image_resi",
				"image_resize_dims"
			],
			[
				"_train",
				"_train_writer"
			],
			[
				"num_obj",
				"num_obj_dimensions"
			],
			[
				"cell_state",
				"cell_state"
			],
			[
				"_predi",
				"_predictor_constructor"
			],
			[
				"_last",
				"_lastinternalpreds"
			],
			[
				"TaskStream",
				"TaskStreamSampling_RNGseed"
			],
			[
				"qval",
				"qval_test"
			],
			[
				"cheby",
				"chebyshev_polynomials"
			],
			[
				"j",
				"j"
			],
			[
				"_coef",
				"_coef"
			],
			[
				"_laststa",
				"_last_state_val"
			],
			[
				"_lastst",
				"_last_state_val"
			],
			[
				"regress",
				"regression_variables"
			],
			[
				"x_action",
				"x_action_internal"
			],
			[
				"state",
				"state_b"
			],
			[
				"_last_state",
				"_last_state_b"
			],
			[
				"sigma",
				"sigma_grad_numerator"
			],
			[
				"_laststate",
				"_last_state_b"
			],
			[
				"_lastact",
				"_lastaction_value_predictions"
			],
			[
				"_last_st",
				"_last_state_val"
			],
			[
				"_lastaction",
				"_lastactionprob"
			],
			[
				"_last_X",
				"_last_X_mu"
			],
			[
				"_policy",
				"_policy_Xstdev_coef"
			],
			[
				"len",
				"len"
			],
			[
				"_policy_X",
				"_policy_Xmu_coef"
			],
			[
				"num_exem",
				"num_exemplars_per_obj"
			],
			[
				"F",
				"F"
			],
			[
				"reward",
				"reward_sigma_proportion"
			],
			[
				"image",
				"image_x"
			],
			[
				"d",
				"d"
			],
			[
				"trial",
				"trial_number"
			],
			[
				"_acti",
				"_action_2_internallabel_dict"
			],
			[
				"_internal",
				"_internallabels"
			],
			[
				"_inte",
				"_internallabels"
			],
			[
				"_in",
				"_internallabel_2_action_dict"
			],
			[
				"pool",
				"pool_objlabels"
			],
			[
				"typ",
				"typ"
			],
			[
				"target",
				"target_to_image_ratio"
			],
			[
				"IMAGE",
				"IMAGE_SCALE"
			],
			[
				"Task",
				"TaskStream_progressbar"
			],
			[
				"_Task",
				"_TaskStreamIDs"
			],
			[
				"_summ",
				"_summary_stats"
			]
		]
	},
	"buffers":
	[
		{
			"file": "public/mkturk.html",
			"settings":
			{
				"buffer_size": 10731,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "public/mkturk_ActionPoller.js",
			"settings":
			{
				"buffer_size": 9919,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 56 files for \"performance.now\"\n\n/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_ActionPoller.js:\n   86              // https://developer.mozilla.org/en-US/docs/Web/API/Touch_events/Supporting_both_TouchEvent_and_MouseEvent\n   87              event.preventDefault() // prevents downstream call of click listener (default for browsers to ensure compatibility with mouse-only websites)\n   88:             var t = Math.round(performance.now()*1000)/1000\n   89              var x = event.targetTouches[0].pageX - _this.leftBound\n   90              var y = event.targetTouches[0].pageY - _this.topBound\n   ..\n   99              }\n  100  \n  101:             var t = Math.round(performance.now() * 1000)/1000 \n  102              var actionIndex = _this.keyCode2actionIndex[event.keyCode]\n  103              if(actionIndex == undefined){\n  ...\n  114          this.recordTouchEvent = function(event){\n  115              event.preventDefault() // prevents downstream call of click listener (default for browsers to ensure compatibility with mouse-only websites)\n  116:             var t = Math.round(performance.now()*1000)/1000\n  117              var x = event.targetTouches[0].pageX - _this.leftBound\n  118              var y = event.targetTouches[0].pageY - _this.topBound\n  ...\n  121  \n  122          this.handleMouseEvent = function(event){\n  123:             var t = Math.round(performance.now()*1000)/1000\n  124              var x = event.pageX - _this.leftBound \n  125              var y = event.pageY - _this.topBound\n  ...\n  129  \n  130          this.recordMouseEvent = function(event){\n  131:             var t = Math.round(performance.now()*1000)/1000\n  132              var x = event.pageX - _this.leftBound \n  133              var y = event.pageY - _this.topBound\n  ...\n  282            var timer_return = function(){resolve({\n  283              \"actionIndex\":'timed_out', \n  284:             'timestamp':Math.round(performance.now()*1000)/1000, \n  285              'x':'timed_out', \n  286              'y':'timed_out'})}\n\n/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_bluetooth.js:\n  178  \n  179    await ble.pumpcharacteristic.startNotifications()\n  180:     var currentTime = performance.now()\n  181:     while (currentTime + 1000 >= performance.now()) {\n  182      }\n  183  \n  ...\n  256    console.log('Attempting bluetooth write')\n  257    var arrInt8 = toBytesInt16(num)\n  258:   ble.twrite_pumpduration=performance.now()\n  259    try{\n  260      await ble.writepumpdurationcharacteristic.writeValue(arrInt8)\n  ...\n  286  \n  287  function onPumpNotificationFromBLE(event){\n  288:   ble.tnotify_pump=performance.now()\n  289    var textstr = 'BLE read notification << ' +\n  290            Math.round(ble.tnotify_pump - ble.twrite_pumpduration) + 'ms'\n  ...\n  305  function onRFIDNotificationFromBLE(event){\n  306    var t0 = ble.tnotify_rfid\n  307:   ble.tnotify_rfid = performance.now()\n  308  \n  309    let value = event.target.value\n\n/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_CheckPointer.js:\n   45  \n   46      this.checkpoint = checkpoint\n   47:     this.lastCheckpointSave = performance.now()\n   48      this.checkpointOnLoad = JSON.parse(JSON.stringify(checkpoint))\n   49  \n   ..\n  113  \n  114  async save_checkpoint(){\n  115:     this.checkpoint['lastSaveUnixTimestamp'] = (window.performance.timing.navigationStart + performance.now())/1000\n  116      var checkpointString = JSON.stringify(this.checkpoint, null, 2)\n  117  \n  ...\n  128  async request_checkpoint_save(){\n  129  \n  130:     if(performance.now() - this.lastCheckpointSave >= this.saveTimeoutMsec){\n  131          await this.save_checkpoint()\n  132:         this.lastCheckpointSave = performance.now()\n  133      }\n  134  }\n\n/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_DataWriter.js:\n    4          this.pollPeriodMsec = 60000\n    5          this.saveTimeoutPeriodMsec = 5000 // save at most every 5 seconds\n    6:         this.lastTrialTimestamp = performance.now() \n    7:         this.lastSaveTimestamp = performance.now()\n    8          this.probeFunctions = {}\n    9          this.keyData = {}\n   ..\n   24              this.trialData[key].push(trialOutcome[key])\n   25          }\n   26:         this.lastTrialTimestamp = performance.now()\n   27      }\n   28  \n   ..\n  126          var pollFunction = function(){\n  127              // If it's been latentSaveModeTimeoutMsec since the last trial, save and enter latent mode.\n  128:             if(performance.now() - _this.lastTrialTimestamp >= _this.latentSaveModeTimeoutMsec){\n  129                  if(_this.inLatentMode == false){\n  130                      console.log('Entering latent save mode.')\n  ...\n  140  \n  141              if(_this.inLatentMode == true){\n  142:                 var lastSaveMsecAgo = performance.now() - _this.lastSaveTimestamp\n  143                  if(lastSaveMsecAgo >= _this.latentSavePeriodMsec){\n  144                      console.log('Executing latent save. Last save was ', lastSaveMsecAgo/1000, 'sec ago.')\n  ...\n  154      async write_out(){\n  155          \n  156:         if(performance.now() - this.lastSaveTimestamp < this.saveTimeoutPeriodMsec){\n  157              //console.log('skipping save')\n  158              return \n  ...\n  161          var dataString = JSON.stringify(this.package_data(), null, 4)\n  162  \n  163:         var savedMsecAgo = Math.round(performance.now() - this.lastSaveTimestamp)\n  164:         this.lastSaveTimestamp = performance.now()\n  165          await this.DIO.write_string(dataString, this.savePath)\n  166          console.log('Saved. Size:', memorySizeOf(dataString, 1), '(Last save', savedMsecAgo/1000,'sec ago):')\n\n/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_Playspace.js:\n  151          wdm('Delivering reinforcement...')\n  152          if (rewardAmount > 0){\n  153:             var t_reinforcementOn = Math.round(performance.now()*1000)/1000\n  154              var p_sound = this.SoundPlayer.play_sound('reward_sound')\n  155              var p_visual = this.ScreenDisplayer.displayReward(trialPackage['rewardTimeOutMsec'])\n  156              var p_primaryReinforcement = this.Reinforcer.deliver_reinforcement(rewardAmount)\n  157              await Promise.all([p_primaryReinforcement, p_visual]) \n  158:             var t_reinforcementOff = Math.round(performance.now()*1000)/1000\n  159          }\n  160          if (rewardAmount <= 0){\n  161:             var t_reinforcementOn = Math.round(performance.now()*1000)/1000\n  162              var p_sound = this.SoundPlayer.play_sound('punish_sound')\n  163              var p_visual = this.ScreenDisplayer.displayPunish(trialPackage['punishTimeOutMsec'])\n  164              await Promise.all([p_sound, p_visual]) \n  165:             var t_reinforcementOff = Math.round(performance.now()*1000)/1000\n  166          }\n  167          if(rewardAmount == undefined){\n  168              rewardAmount = 0\n  169:             var t_reinforcementOn = Math.round(performance.now()*1000)/1000\n  170:             var t_reinforcementOff = Math.round(performance.now()*1000)/1000\n  171          }\n  172  \n  ...\n  242          var _this = this\n  243          var periodic_reward = function(){\n  244:             var t = Math.round(performance.now()*1000)/1000\n  245              _this.Reinforcer.deliver_reinforcement(_this.periodicRewardAmount)\n  246              _this.SoundPlayer.play_sound('reward_sound')\n  ...\n  334              bounds['windowWidth'] = windowWidth\n  335              bounds['windowHeight'] = windowHeight\n  336:             bounds['t'] = Math.round(performance.now()*1000)/1000\n  337  \n  338              _this.ScreenDisplayer.calibrateBounds(bounds)\n  ...\n  367                  _this.deviceLog['battery']['level'].push(batteryobj.level)\n  368                  _this.deviceLog['battery']['dischargingTime'].push(batteryobj.dischargingTime)\n  369:                 _this.deviceLog['battery']['timestamp'].push(Math.round(performance.now()*1000)/1000)\n  370  \n  371                  batteryobj.addEventListener('levelchange',function(){\n  372                      _this.deviceLog['battery']['level'].push(batteryobj.level)\n  373                      _this.deviceLog['battery']['dischargingTime'].push(batteryobj.dischargingTime)\n  374:                     _this.deviceLog['battery']['timestamp'].push(Math.round(performance.now()*1000)/1000)\n  375                  })\n  376                });\n  ...\n  390              _this.deviceLog['window']['height'].push(getWindowHeight())\n  391              _this.deviceLog['window']['width'].push(getWindowWidth())\n  392:             _this.deviceLog['window']['timestamp'].push(Math.round(performance.now()*1000)/1000)\n  393          })\n  394  \n\n/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_ScreenDisplayer.js:\n  351              if (timestamp - lastframe_timestamp >= t_durations[current_frame_index] || lastframe_timestamp == undefined){\n  352                  current_frame_index++;\n  353:                 frame_unix_timestamps[current_frame_index] = performance.now() //in milliseconds, rounded to nearest hundredth of a millisecond\n  354                  // Move canvas in front\n  355                  var curr_canvasobj = sequence[current_frame_index]\n\n/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_usb.js:\n  118    if (tagstart > 0){\n  119      var tagend = port.statustext_received.indexOf('}',0);\n  120:     TRIAL.RFIDTime[TRIAL.NRFID] = Math.round(performance.now());\n  121      TRIAL.RFIDTrial[TRIAL.NRFID] = CURRTRIAL.num\n  122      TRIAL.RFIDTag[TRIAL.NRFID] = port.statustext_received.slice(tagstart+4,tagend);\n  ...\n  171    try{\n  172      let result = await port.device_.transferIn(5, 128) //(endpoint#,length)->requesting a 64 byte buffer\n  173:     // serial.tread=performance.now()\n  174:     // serial.dt.push(performance.now()-serial.treadOld); //-serial.twrite)\n  175:     // serial.treadOld=performance.now()\n  176      // var textstr = 'Serial roundtrip write->read << ' +\n  177      //           Math.round(serial.tread - serial.twrite) + 'ms'\n  ...\n  208  //PORT - send pump duration to arduino\n  209  serial.Port.prototype.writepumpdurationtoUSBBYTE = async function(data) {\n  210:   serial.twrite_pumpduration=performance.now()\n  211    let view = new Uint16Array(1);\n  212    view[0] = parseInt(data,10);\n\n40 matches across 7 files\n",
			"settings":
			{
				"buffer_size": 10316,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "public/mkturk_SessionBootStrapper.js",
			"settings":
			{
				"buffer_size": 7799,
				"line_ending": "Unix"
			}
		},
		{
			"file": "public/setup_upstairs_session.js",
			"settings":
			{
				"buffer_size": 3216,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "class CheckPointerClass{\n    constructor(gamePackage){\n        this.gamePackage = gamePackage\n\n    }\n\n    generate_hash(){\n        var hash = JSON.stringify(this.gamePackage)\n        hash = hash.hashCode()\n        return hash\n    }\n}\n\nclass DropboxCheckPointer extends CheckPointerClass{ \n\nconstructor(DIO, agentId, gamePackage){\n    super(gamePackage)\n\n    this.DIO = DIO\n    this.agentId = agentId\n    this.saveTimeoutMsec = 5000 \n    this.debugMode = true\n}\n\nasync build(){\n    this.checkpointSavePath = join([INSTALL_SETTINGS.checkpointDirPath, 'Checkpoint_'+this.agentId+'.ckpt'])\n    this.debugCheckpointSavePath = join([INSTALL_SETTINGS.debugCheckpointDirPath, 'debug_Checkpoint_'+this.agentId+'.ckpt'])\n\n    var exists = await DIO.exists(this.checkpointSavePath)\n    if(exists == true){\n        try{\n            var checkpoint = await DIO.read_textfile(this.checkpointSavePath) \n            var checkpoint = JSON.parse(checkpoint)\n            var checkpoint = this.verify_checkpoint(checkpoint)\n        }\n        catch(error){\n            console.log(error)\n            var checkpoint = this.generate_default_checkpoint()\n        }\n    }\n    else{\n        console.log('Could not find checkpoint on disk. Creating default...')\n        var checkpoint = this.generate_default_checkpoint()\n    }\n\n    this.checkpoint = checkpoint\n    this.lastCheckpointSave = performance.now()\n    this.checkpointOnLoad = JSON.parse(JSON.stringify(checkpoint))\n\n    this.save_checkpoint()\n\n    // Start writing out periodically\n}\n\ndebug2record(){\n    this.debugMode = false\n    this.checkpoint = this.checkpointOnLoad\n    console.log('debug2record: CheckPointer reverted to checkpoint on load.')\n}\n\nverify_checkpoint(checkpoint){\n    var verified = true \n    var checkpointTemplate = this.generate_default_checkpoint()\n\n    for (var k in checkpointTemplate){\n        if(!checkpointTemplate.hasOwnProperty(k)){\n            continue\n        }\n        if (checkpoint[k] == undefined){\n            verified = false\n        }\n    }\n    if(checkpoint['gameHash'] != this.generate_hash()){\n        verified = false\n    }\n\n    if(verified == false){\n        console.log('Current game does not match checkpoint. Generating default... ')\n        checkpoint = this.generate_default_checkpoint()\n    }\n\n    return checkpoint\n}\n\ngenerate_default_checkpoint(){\n    var checkpoint = {}\n    checkpoint['agentId'] = this.agentId\n    checkpoint['gameHash'] = this.generate_hash()\n    checkpoint['taskNumber'] = 0 \n    checkpoint['trialNumberTask'] = 0\n    checkpoint['taskReturnHistory'] = []\n    checkpoint['taskActionHistory'] = []\n    checkpoint['taskBagHistory'] = []\n    \n    return checkpoint\n}\n\nupdate(checkpointPackage){\n\n    if (this.checkpoint['taskNumber'] != checkpointPackage['taskNumber']){\n        this.checkpoint['taskReturnHistory'] = []\n        this.checkpoint['taskActionHistory'] = []\n        console.log('CheckPointer noted subject moved to new task, ', checkpointPackage['taskNumber'])\n    }\n    this.checkpoint['taskNumber'] = checkpointPackage['taskNumber']\n    this.checkpoint['trialNumberTask'] = checkpointPackage['trialNumberTask']\n    this.checkpoint['taskReturnHistory'].push(checkpointPackage['return'])\n    this.checkpoint['taskActionHistory'].push(checkpointPackage['action'])\n    this.checkpoint['taskBagHistory'].push(checkpointPackage['i_sampleBag'])\n\n \n}\n\nasync save_checkpoint(){\n    this.checkpoint['lastSaveUnixTimestamp'] = (window.performance.timing.navigationStart + performance.now())/1000\n    var checkpointString = JSON.stringify(this.checkpoint, null, 2)\n\n    if(this.debugMode == true){\n        var savePath = this.debugCheckpointSavePath\n    }\n    else{\n        var savePath = this.checkpointSavePath\n    }\n    await this.DIO.write_string(checkpointString, savePath)\n    console.log('Saved checkpoint at', savePath, 'of size', memorySizeOf(checkpointString, 1))\n}\n\nasync request_checkpoint_save(){\n\n    if(performance.now() - this.lastCheckpointSave >= this.saveTimeoutMsec){\n        await this.save_checkpoint()\n        this.lastCheckpointSave = performance.now()\n    }\n}\n\n\nget_task_number(){\n  return this.checkpoint['taskNumber']\n}\n\nget_trial_number_task(){\n  return this.checkpoint['trialNumberTask']\n}\n\nget_task_return_history(){\n  return this.checkpoint['taskReturnHistory']\n}\nget_task_action_history(){\n  return this.checkpoint['taskActionHistory']\n}\nget_task_bag_history(){\n    return this.checkpoint['taskBagHistory']\n}\n\n\n}\n\n\n\nclass MechanicalTurkCheckPointer extends CheckPointerClass{ \n\n    constructor(gamePackage){\n        super(gamePackage)\n\n    }\n\n    async build(){\n    }\n\n    debug2record(){\n    }\n\n\n    update(checkpointPackage){\n    }\n\n\n    async request_checkpoint_save(){\n        return\n    }\n\n\n    get_task_number(){\n      return 0\n    }\n\n    get_trial_number_task(){\n      return 0\n    }\n\n    get_task_return_history(){\n      return []\n    }\n    get_task_action_history(){\n      return []\n    }\n    get_samples_seen_history(){\n        return {}\n    }\n\n    get_task_bag_history(){\n        return []\n    }\n}\n\n\n\n",
			"file": "public/mkturk_CheckPointer.js",
			"file_size": 5180,
			"file_write_time": 131641500450000000,
			"settings":
			{
				"buffer_size": 5051,
				"line_ending": "Unix"
			}
		},
		{
			"file": "public/landing_pages/inlab/landing_page_selector.html",
			"settings":
			{
				"buffer_size": 1841,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "docs/installing_ptap_on_tablets.md",
			"settings":
			{
				"buffer_size": 4370,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "Package Control: ",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"Package Control: c",
				"Package Control: List Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 428.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/michaellee/Dropbox (MIT)/ptap/public",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/landing_pages",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/landing_pages/examples",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/landing_pages/inlab"
	],
	"file_history":
	[
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_UX.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_usb.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_bluetooth.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_ScreenDisplayer.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_ActionPoller.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_SessionBootStrapper.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_utils.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_TaskStreamer.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/landing_pages/landing_page_template_dynamic.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_TrialGenerator.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_Playspace.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_Reinforcer.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/landing_pages/examples/landingPage_MechanicalTurk_MTS_choicespace.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/landing_pages/inlab/landing_page_selector.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/setup_upstairs_session.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_style.css",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/setup_MechanicalTurk_session.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/landing_pages/examples/landingPage_InlabSR.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_BiasDetection.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/unit_tests.js",
		"/Users/michaellee/.ipython/profile_default/startup/mil_standard_imports.ipy",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/landing_pages/inlab/Zico_landing_page.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/landing_pages/inlab/Michaelo_landing_page.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_window.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/landing_pages/examples/InlabMTS_fromurl.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/landing_pages/examples/Inlab_SR_bootstrap_from_dropbox.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/landing_pages/examples/InlabMTS.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/landing_pages/examples/inlabSR.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/landing_pages/examples/MechanicalTurk_MTS.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/landing_pages/template_landing_page.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/behaviorParsers/unpack_data.py",
		"/Users/michaellee/Dropbox (MIT)/ptap/landing_pages/examples/MechanicalTurk_MTS.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/landing_pages/template_landing_page.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/landing_pages/examples/Inlab_SR_bootstrap_from_dropbox.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/landing_pages/examples/Inlab_MTS.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/landing_page_utils.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/landing_page_templates/landing_page_template_mechanicalturker.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/Zico_landing_page.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/landing_page_templates/landing_page_utils.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/Turkboy_landing_page.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/Michaelo_landing_page.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/Turker_landing_page.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_amazon_utils.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_verify_inputs.js",
		"/Users/michaellee/Dropbox (MIT)/MonkeyTurk_upstairs/GameResources/Games/6_Mutator.json",
		"/Users/michaellee/Dropbox (MIT)/MonkeyTurk_upstairs/GameResources/Game/6_MutatorSRTraining.json",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_input_schema.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_scratch.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_tutorial.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_eventlisteners.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/setup_upstairs_game.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/setup_MechanicalTurk_game.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/setup_MechanicalTurk_task.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/setup_upstairs_task.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_Artist.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_AssetFetcher.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_canvas_business.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_artist.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_globalvariables.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_CheckPointer.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/manual_setup.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_reinforcement.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_data_writer.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_runtrial.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_rewardmap.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/mkturk_setup.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/liveplot.html",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/liveplot_utils.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/liveplot_plotter.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/liveplot_globals.js",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/liveplot_eventlisteners.js",
		"/Users/michaellee/Dropbox (MIT)/MIT_Projects/Transfer_MTS_SR/dataformat/SRbehavior.json",
		"/Users/michaellee/Dropbox (MIT)/ptap/docs/taskdefinition_format.json",
		"/Users/michaellee/Dropbox (MIT)/MIT_Projects/Transfer_MTS_SR/dataformat/MTSbehavior.json",
		"/Users/michaellee/Dropbox (MIT)/MIT_Projects/Transfer_MTS_SR/dataformat/SRmetrics.json",
		"/Users/michaellee/Dropbox (MIT)/MIT_Projects/Transfer_MTS_SR/dataformat/MTShistory_format.json",
		"/Users/michaellee/Dropbox (MIT)/ptap/upload_ptap_to_upstairs.py",
		"/Users/michaellee/Dropbox (MIT)/ptap/upload_landingpages_to_upstairs.py",
		"/Users/michaellee/Dropbox (MIT)/ptap/example/Michaelo_landing_page.html",
		"/Users/michaellee/Dropbox (MIT)/MIT_Projects/FewShot/fewshot_behavioraldataformat.json",
		"/Users/michaellee/Dropbox (MIT)/ptap/public/setup_Ratan_task.js",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/README.md",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Generator/Generator.py",
		"/Users/michaellee/Dropbox (MIT)/TurkMonitor/hellodropbox.html",
		"/Users/michaellee/Dropbox (MIT)/TurkMonitor/MechanicalTurk_ExperimentDefinitions/misc_resources/Zico_learned_object_pool.json",
		"/Users/michaellee/Dropbox (MIT)/TurkMonitor/MechanicalTurk_ExperimentDefinitions/misc_resources/Zico_novel_and_unrelated_object_pool.json",
		"/Users/michaellee/Dropbox (MIT)/TurkMonitor/MechanicalTurk_ExperimentDefinitions/misc_resources/Zico_novel_object_pool.json",
		"/Users/michaellee/Dropbox (MIT)/mkturk/public/liveplot.html",
		"/Users/michaellee/Dropbox (MIT)/TurkMonitor/StartTurkMonitor.py",
		"/Users/michaellee/Dropbox (MIT)/TurkMonitor/sandbox_publish.py",
		"/Users/michaellee/Dropbox (MIT)/TurkMonitor/write_landing_html.py",
		"/Users/michaellee/Dropbox (MIT)/TurkMonitor/upload_mkturk_to_sandbox.py",
		"/Users/michaellee/Dropbox (MIT)/DiCarloLab/ccn_notes_2017",
		"/Users/michaellee/Dropbox (MIT)/mkturk/public/seedrandom.js",
		"/Users/michaellee/Dropbox (MIT)/mkturk/public/deprecated/_deprecated_snippets.js",
		"/Users/michaellee/Dropbox (MIT)/mkturk/public/TabletTask_utils.js",
		"/Users/michaellee/Dropbox (MIT)/mkturk/public/monkeyturk_setup.js",
		"/Users/michaellee/Dropbox (MIT)/mkturk/public/mkturk.html",
		"/Users/michaellee/Dropbox (MIT)/mkturk/public/liveplot_v2.html",
		"/Users/michaellee/Dropbox (MIT)/mkturk/public/_deprecated_snippets.js",
		"/Users/michaellee/Dropbox (MIT)/mkturk/public/mkturk_screenfunctions.js",
		"/Users/michaellee/Dropbox (MIT)/mkturk/public/mkturk_dropbox.js",
		"/Users/michaellee/Dropbox (MIT)/mkturk/public/experiment_flow.js",
		"/Users/michaellee/Dropbox (MIT)/mkturk/public/mkturk_automator.js",
		"/Users/michaellee/Dropbox (MIT)/mkturk/public/liveplot_utils.js",
		"/Users/michaellee/Dropbox (MIT)/mkturk/public/liveplot_googlecharts.js",
		"/Users/michaellee/Dropbox (MIT)/mkturk/public/mkturkmanifest.json",
		"/Users/michaellee/Dropbox (MIT)/mkturk/public/readme.md",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/liveplot.html",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/liveplot_utils.js",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/liveplot_googlecharts.js",
		"/Users/michaellee/Dropbox (MIT)/Apps/MonkeyTurk_mil_app/Subjects/SubjectCheckpoints/Michaelo_checkpoint.txt",
		"/Users/michaellee/Dropbox (MIT)/Apps/MonkeyTurk_mil_app/Subjects/SubjectCheckpoints/Checkpoint_Michaelo.ckpt",
		"/Users/michaellee/Dropbox (MIT)/Apps/MonkeyTurk_mil_app/Tasks/SubjectSettings/Michaelo_settings.txt",
		"/Users/michaellee/Dropbox (MIT)/Apps/MonkeyTurk_mil_app/Tasks/SubjectParameters/Zico_params.txt",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_hardware.js",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_utils.js",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_TrialQueue.js",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_installsettings.js",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js",
		"/Users/michaellee/Dropbox (MIT)/Apps/MonkeyTurk_mil_app/test.txt",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_automator.js",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_bluetooth.js",
		"/Users/michaellee/Dropbox (MIT)/MonkeyTurk/parameterfiles/subjects/Zico_params.txt",
		"/Users/michaellee/Dropbox (MIT)/PrimatePsychophysics/BehavioralComparisons.py",
		"/Users/michaellee/Dropbox (MIT)/PrimatePsychophysics/Analyses/BehavioralComparisons.py"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"keyCode2actionIndex",
			"performance.now",
			"download_from_string",
			"unpack_game_package",
			"SessionBootStrapper",
			"setup_upstairs_session",
			"localstorageio",
			"localSavePackage",
			"reactionTime",
			"actionOutcome",
			"handleActionEvent",
			"resolve",
			"actionpoller",
			"actionOutcome",
			"actionOutcome['timestamp",
			"waitforClick",
			"skipBLEDevice",
			"noble",
			"usbbutton",
			"reward",
			"sleep",
			"waitforclickGenerator",
			"waitforClick",
			"writepumpdurationtoUSB",
			"findUSBDevice",
			"waitforClick",
			"skipBLEDevice",
			"noble",
			"connectble",
			"skip",
			"find",
			"connectBLEButtonPromise",
			"MonkeyUX",
			"connectBLEButtonPromise",
			"button",
			"blankCanvas",
			"renderBlank",
			"blankcanvas",
			"window.performance.timing.navigationStart",
			"unix",
			"load",
			"onpageload",
			"recordTouchEvent",
			"add_event_listener",
			"timestamp",
			"Promise_wait_until_active_response",
			"fixationOutcome",
			"timestampStart",
			"shuffle",
			"replace",
			"setupSession",
			"writepump",
			"crypto",
			"localStorage",
			"LocalStorageIO",
			"agentID",
			"download_from_string",
			"load_localstorage_string",
			"sessionPackageBootstrapString",
			"could not infer",
			"btoa",
			" ee ",
			"ee ",
			"ee",
			"ée",
			"class np",
			"bagSamplingWeights",
			"get_bag_from_idx",
			"bagSamplingWeights",
			"get_trial",
			"canvas_punish",
			"displaypunish",
			"rewardMap",
			"tasktype",
			"correctIdx",
			"class np",
			"class",
			"np { ",
			"np{ ",
			"np ",
			"np",
			"choicemap",
			"draw",
			"TaskStreamer",
			"setup_upstairs",
			".buffer_trial",
			"overflow",
			"select which",
			"flex",
			"MechanicalTurkInstructionsSplash"
		],
		"highlight": false,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "public/mkturk.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10731,
						"regions":
						{
						},
						"selection":
						[
							[
								648,
								648
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": 0,
								"count": 265,
								"modified": false,
								"selection": false,
								"status": -1,
								"syntax": "plain text"
							},
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2217.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "public/mkturk_ActionPoller.js",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 9919,
						"regions":
						{
						},
						"selection":
						[
							[
								3835,
								3835
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": -1,
								"modified": true,
								"selection": true,
								"status": -1,
								"syntax": "javascript"
							},
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 993.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10316,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										434,
										449
									],
									[
										683,
										698
									],
									[
										1102,
										1117
									],
									[
										1386,
										1401
									],
									[
										1637,
										1652
									],
									[
										1932,
										1947
									],
									[
										2200,
										2215
									],
									[
										2258,
										2273
									],
									[
										2431,
										2446
									],
									[
										2626,
										2641
									],
									[
										2895,
										2910
									],
									[
										3115,
										3130
									],
									[
										3360,
										3375
									],
									[
										3535,
										3550
									],
									[
										3690,
										3705
									],
									[
										3962,
										3977
									],
									[
										4021,
										4036
									],
									[
										4239,
										4254
									],
									[
										4463,
										4478
									],
									[
										4780,
										4795
									],
									[
										5082,
										5097
									],
									[
										5369,
										5384
									],
									[
										5453,
										5468
									],
									[
										5866,
										5881
									],
									[
										6305,
										6320
									],
									[
										6444,
										6459
									],
									[
										6768,
										6783
									],
									[
										6950,
										6965
									],
									[
										7034,
										7049
									],
									[
										7213,
										7228
									],
									[
										7554,
										7569
									],
									[
										7925,
										7940
									],
									[
										8315,
										8330
									],
									[
										8632,
										8647
									],
									[
										9003,
										9018
									],
									[
										9412,
										9427
									],
									[
										9738,
										9753
									],
									[
										9785,
										9800
									],
									[
										9869,
										9884
									],
									[
										10193,
										10208
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": 9,
								"count": 288,
								"modified": false,
								"selection": false,
								"status": -1,
								"syntax": "plain text"
							},
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "public/mkturk_SessionBootStrapper.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7799,
						"regions":
						{
						},
						"selection":
						[
							[
								1771,
								1787
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": -1,
								"modified": true,
								"selection": true,
								"status": -1,
								"syntax": "javascript"
							},
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "public/setup_upstairs_session.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3216,
						"regions":
						{
						},
						"selection":
						[
							[
								15,
								37
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": -1,
								"modified": true,
								"selection": true,
								"status": -1,
								"syntax": "javascript"
							},
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "public/mkturk_CheckPointer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5051,
						"regions":
						{
						},
						"selection":
						[
							[
								4600,
								4600
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": -1,
								"modified": true,
								"selection": true,
								"status": -1,
								"syntax": "javascript"
							},
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2352.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "public/landing_pages/inlab/landing_page_selector.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1841,
						"regions":
						{
						},
						"selection":
						[
							[
								769,
								769
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": 729,
								"count": 6,
								"modified": false,
								"selection": false,
								"status": -1,
								"syntax": "plain text"
							},
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "docs/installing_ptap_on_tablets.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4370,
						"regions":
						{
						},
						"selection":
						[
							[
								1396,
								1396
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": 421,
								"count": 636,
								"modified": false,
								"selection": false,
								"status": -1,
								"syntax": "plain text"
							},
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 37.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "ptap.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 404.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 359.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 2
	}
}
